{
  "app": {
    "name": "GTSC"
  },
  "navigation": {
    "home": "Home",
    "about": "About",
    "login": "Login",
    "logout": "Logout",
    "privacyPolicy": "Privacy Policy"
  },
  "serverStatus": {
    "api": "API",
    "notConnected": "Not connected"
  },
  "footer": {
    "copyrightOrg": "GTSC",
    "selectLanguage": "Select language"
  },
  "pages": {
    "login": {
      "title": "Login",
      "email": "E-mail",
      "password": "Password",
      "signIn": "Sign in",
      "noAccount": "Don't have an account yet?",
      "signUp": "Sign up"
    }
  },
  "error": {
    "validation": {
      "beEmpty": "The value must be empty",
      "beNotEmpty": "The value must not be empty",
      "beText": "The value must be text",
      "beTextValue": "The value must be text with a value",
      "beNumber": "The value must be a number",
      "beWholeNumber": "The value must be a whole number",
      "beBigInteger": "The value must be a bigint",
      "beBoolean": "The value must be true or false",
      "beDate": "The value must be a date",
      "beDateTime": "The value must be a date/time",
      "beTime": "The value must be a time",
      "beTimestampMilliseconds": "The value must be a timestamp in milliseconds",
      "beTimestampSeconds": "The value must be a timestamp in seconds",
      "beObject": "The value must be an object",
      "beArray": "The value must be an array",
      "beArrayValue": "The value must be an array with at least one item",
      "beIncluded": "The value is unrecognised",
      "beByteArray": "The value must be a byte array",
      "beUrn": "The value must be a correctly formatted urn",
      "beUrl": "The value must be a correctly formatted url",
      "beJSON": "The value must be correctly formatted JSON",
      "beEmail": "The value must be a correctly formatted e-mail address",
      "failed": "Validation failed",
      "failedObject": "Validation of \"{objectName}\" failed"
    },
    "guard": {
      "undefined": "Property \"{property}\" must be defined, it is \"{value}\"",
      "string": "Property \"{property}\" must be a string, it is \"{value}\"",
      "stringEmpty": "Property \"{property}\" must have a value, it is empty",
      "stringBase64": "Property \"{property}\" must be a base64 encoded string, it is \"{value}\"",
      "stringBase64Url": "Property \"{property}\" must be a base64 url encoded string, it is \"{value}\"",
      "stringHex": "Property \"{property}\" must be a hex string, it is \"{value}\"",
      "stringHexLength": "Property \"{property}\" must be a hex string of length \"{options}\", it is \"{value}\"",
      "number": "Property \"{property}\" must be a number, it is \"{value}\"",
      "integer": "Property \"{property}\" must be an integer, it is \"{value}\"",
      "bigint": "Property \"{property}\" must be a bigint, it is \"{value}\"",
      "boolean": "Property \"{property}\" must be a boolean, it is \"{value}\"",
      "date": "Property \"{property}\" must be a date, it is \"{value}\"",
      "timestampMilliseconds": "Property \"{property}\" must be a timestamp in milliseconds, it is \"{value}\"",
      "timestampSeconds": "Property \"{property}\" must be a timestamp in seconds, it is \"{value}\"",
      "objectUndefined": "Property \"{property}\" must be an object, it is \"undefined\"",
      "object": "Property \"{property}\" must be an object, it is \"{value}\"",
      "objectValue": "Property \"{property}\" must be an object, with at least one property, it is \"{value}\"",
      "array": "Property \"{property}\" must be an array, it is \"{value}\"",
      "arrayValue": "Property \"{property}\" must be an array with at least one item",
      "arrayOneOf": "Property \"{property}\" must be one of [{options}], it is \"{value}\"",
      "uint8Array": "Property \"{property}\" must be a Uint8Array, it is \"{value}\"",
      "function": "Property \"{property}\" must be a function, it is \"{value}\"",
      "urn": "Property \"{property}\" must be a Urn formatted string, it is \"{value}\"",
      "url": "Property \"{property}\" must be a Url formatted string, it is \"{value}\"",
      "email": "Property \"{property}\" must be string in e-mail format, it is \"{value}\"",
      "length32Multiple": "Property \"{property}\" should be a multiple of 32, it is {value}",
      "lengthEntropy": "Property \"{property}\" should be a multiple of 4, >=16 and <= 32, it is {value}",
      "length3Multiple": "Property \"{property}\" should be a multiple of 3, it is {value}",
      "greaterThan0": "Property \"{property}\" must be greater than zero, it is {value}"
    },
    "objectHelper": {
      "failedBytesToJSON": "Failed converting bytes to JSON"
    },
    "common": {
      "notImplementedMethod": "The method \"{method}\" has not been implemented",
      "validation": "Validation failed"
    },
    "factory": {
      "noUnregister": "There is no {typeName} registered with the name \"{name}\"",
      "noGet": "The requested {typeName} \"{name}\" does not exist in the factory"
    },
    "bitString": {
      "outOfRange": "The index should be >= 0 and less than the length of the bit string"
    },
    "fetchHelper": {
      "decodingJSON": "Decoding JSON failed for route \"{route}\"",
      "failureStatusText": "The request to the API failed: \"{statusText}\"",
      "connectivity": "The request failed, the API could be offline, or there are other connectivity issues",
      "timeout": "The request timed out",
      "general": "A general failure occurred during the request"
    },
    "jwt": {
      "noKeyOrSigner": "No key or signer was provided for JWT creation",
      "noKeyOrVerifier": "No key or verifier was provided for JWT creation"
    },
    "bip39": {
      "missingMnemonicWord": "The mnemonic contains a word not in the wordlist, \"{value}\"",
      "checksumMismatch": "The checksum does not match \"{newChecksum}\" != \"{checksumBits}\""
    },
    "ed25519": {
      "privateKeyLength": "The private key length is incorrect, it should be \"{requiredSize}\" but is \"{actualSize}\"",
      "publicKeyLength": "The public key length is incorrect, it should be \"{requiredSize}\" but is \"{actualSize}\""
    },
    "secp256k1": {
      "privateKeyLength": "The private key length is incorrect, it should be \"{requiredSize}\" but is \"{actualSize}\"",
      "publicKeyLength": "The public key length is incorrect, it should be \"{requiredSize}\" but is \"{actualSize}\""
    },
    "x25519": {
      "invalidPublicKey": "Invalid Ed25519 Public Key"
    },
    "blake2b": {
      "outputLength64": "The output length should be between 1 and 64, it is \"{outputLength}\"",
      "keyLength64": "The key length should be between 1 and 64, it is \"{keyLength}\""
    },
    "sha512": {
      "bitSize": "Only 224, 256, 384 or 512 bits are supported, it is \"{bitSize}\""
    },
    "sha256": {
      "bitSize": "Only 224 or 256 bits are supported, it is \"{bitSize}\""
    },
    "hmacSha256": {
      "bitSize": "Only 224 or 256 bits are supported, it is \"{bitSize}\""
    },
    "hmacSha512": {
      "bitSize": "Only 224, 256, 384 or 512 bits are supported, it is \"{bitSize}\""
    },
    "base32": {
      "invalidCharacter": "Data contains a character \"{invalidCharacter}\" which is not in the charset"
    },
    "base64": {
      "length4Multiple": "Invalid length should be a multiple of 4, it is \"{value}\""
    },
    "bech32": {
      "decodeFailed": "The address contains decoding failed for address \"{bech32}\"",
      "invalidChecksum": "The address contains an invalid checksum in address, \"{bech32}\"",
      "separatorMisused": "The separator character '1' should only be used between hrp and data, \"{bech32}\"",
      "lowerUpper": "The address my use either lowercase or uppercase, \"{bech32}\"",
      "dataTooShort": "The address does not contain enough data to decode, \"{bech32}\""
    },
    "pbkdf2": {
      "keyTooLong": "The requested key length \"{keyLength}\" is too long, based on the \"{macLength}\""
    },
    "chaCha20Poly1305": {
      "noAadWithData": "You can not set the aad when there is already data",
      "noAuthTag": "Can not finalise when the auth tag is not set",
      "authenticationFailed": "The data could not be authenticated",
      "authTagDecrypting": "Can not get the auth tag when decrypting",
      "authTagEncrypting": "Can not set the auth tag when encrypting",
      "noAuthTagSet": "The auth tag has not been set"
    },
    "bip44": {
      "unsupportedKeyType": "The key type \"{keyType}\" is not supported"
    },
    "slip0010": {
      "invalidSeed": "The seed is invalid \"{seed}\""
    },
    "baseRestClient": {
      "missingRouteProp": "Missing route parameter in data \"{routeProp}\" for route \"{route}\"",
      "decodingFailed": "Decoding JSON failed for route \"{route}\"",
      "failureStatusText": "The request to the API failed: \"{statusText}\""
    },
    "entityStorageAuthenticationService": {
      "loginFailed": "Login failed",
      "userNotFound": "The user with the specified e-mail could not be found",
      "passwordMismatch": "The password does not match the user's password"
    },
    "entityStorageAuthenticationProcessor": {
      "initializeFailed": "The JSON Web token authentication processor could not be initialized",
      "missing": "The JSON Web token could not be found in the authorization header",
      "invalid": "The JSON Web token signature could not be validated",
      "expired": "The JSON Web token has expired"
    }
  },
  "errorNames": {
    "error": "Error",
    "generalError": "General",
    "guardError": "Guard",
    "conflictError": "Conflict",
    "notFoundError": "Not Found",
    "notSupportedError": "Not Supported",
    "alreadyExistsError": "Already Exists",
    "notImplementedError": "Not Implemented",
    "validationError": "Validation"
  },
  "errorMessages": {
    "fetch": "Fetch"
  }
}